#!/usr/bin/env python

import sys
import socket
import time
import argparse

import nclib


{% set newline = joiner('\n') -%}
{% for name, value in constants.items() %}
{%- set value = value.value -%}
{%- if value is not none -%}
{{- newline() -}}
{{ name }} = {{ value }}
{% endif -%}
{% endfor %}


def connect_target():
    return nclib.Netcat((host, port))


def send_all(sock, data, _=None):
    sent = 0
    while sent < len(data):
        sent += sock.send(data)
    return sent


def recv_all(sock, _=None):
    result = b''
    while True:
        one_result = sock.recv(sock, 4096)
        if len(one_result) == 0:
           break
        result += one_result
    return result


def finish(sock):
    sock.shutdown(socket.SHUT_WR)

    result = recv_all(sock)
    sock.close()

    print(result)


def RETURN(*args):
    return args


def main():
    parser = argparse.ArgumentParser(description="Launch exploit.")
    parser.add_argument('host')
    parser.add_argument('port')
    parser.add_argument('-c', '--cmd', nargs="*")
    args = parser.parse_args()

    global host, port
    host = args.host
    port = int(args.port)

    if args.cmd:
        def finish(sock):
            for c in args.cmd:
                time.sleep(0.1)
                sock.send_line(c.encode())
                time.sleep(0.1)
                print(sock.recv(timeout=4).decode('utf-8'), end="")

{% set newline = joiner('\n') -%}
{% for action in actions %}
{{- newline() -}}
{{ '    ' }}
{%- if action.function_result.name -%}
    {{ action.function_result.name }} ={{ ' ' }}
{%- endif -%}
    {{ action.function }}(
{%- set separator = joiner(', ') -%}
{%- for arg in action.args -%}
    {{- separator() -}}
    {{ arg }}
{%- endfor -%}
    )
{% endfor %}


if __name__ == '__main__':
    main()