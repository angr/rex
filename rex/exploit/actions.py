from abc import abstractmethod

import claripy
from archr.targets.actions import OpenChannelAction, SendAction, WaitAction, CloseChannelAction

class RexAction:
    @abstractmethod
    def render(self, stype='py', script=''):
        """
        How this action should be translated in standalone exploits
        How to translate this action into standalone exploit
        """
        assert stype in ['c', 'py']
        if stype == 'c':
            marker = f"// {self.__class__.__name__}\n"
        elif stype == 'py':
            marker = f"# {self.__class__.__name__}\n"
        return marker+script+"\n"

class RexOpenChannelAction(RexAction, OpenChannelAction):
    def render(self, stype='py', script=''):
        script = "r = nclib.Netcat((args.host, args.port), udp=False, verbose=True)"
        return super().render(stype=stype, script=script)

class RexSendAction(RexAction, SendAction):
    def __init__(self, data, channel_name=None):
        super().__init__(data, channel_name)
        self.sim_data = claripy.Concat(*[claripy.BVS("aeg_input", 8) for _ in range(len(data))])
        self.concrete_data = None

    def render(self, stype='py', script=''):
        script = f"r.send({repr(self.concrete_data)})"
        return super().render(stype=stype, script=script)

class RexWaitAction(RexAction, WaitAction):
    def render(self, stype='py', script=''):
        script = f"time.sleep({self.seconds})"
        return super().render(stype=stype, script=script)

class RexCloseChannelAction(RexAction, CloseChannelAction):
    def render(self, stype='py', script=''):
        super().render(stype=stype)
        script = "r.close()"
        return super().render(stype=stype, script=script)